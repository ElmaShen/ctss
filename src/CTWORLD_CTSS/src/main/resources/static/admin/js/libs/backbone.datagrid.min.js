// backbone.datagrid v0.3.2
//
// Copyright (c) 2012 Lo√Øc Frering <loic.frering@gmail.com>
// Distributed under the MIT license

(function() {

    var Datagrid = Backbone.View.extend({
        initialize: function(options) {
            this.options = options;
            this.columns = this.options.columns;

            this.options = _.defaults(this.options, {
                paginated: false,
                tableClassName: 'table',
                emptyMessage: $.config.datagrid.emptyMessage
            });

            this.options.page = this.options.data && 1;
            this.options.perPage = this.options.data && this.options.data.perPage || $.config.datagrid.per_page,
                this.options.selectorNum = this.options.data && $.config.datagrid.selector_num;

            this.collection.on('reset', this.render, this);
            this._prepare();
        },

        render: function() {
            if (_.isUndefined(this.collection.pop)) {
                var len = this.collection.length;
                var info = this.collection.at(len - 1);
                this.collection.remove(info);
            } else {
                var info = this.collection.pop();
            }
            $.coll_info = info;
            this.pager.set('total', info.get("total_count"));
            if (!this.columns || _.isEmpty(this.columns)) {
                this._prepareColumns();
            }

            if (this.options.paginated) {
                this.pager.update(this.collection);
            }

            this.$el.empty();
            this.renderTable();
            if (this.options.paginated) {
                this.renderPagination();
            }

            return this;
        },

        renderTable: function() {
            var $table = $('<table id="dynamic-table" role="grid" aria-describedby="dynamic-table_info"></table>').addClass(this.options.tableClassName);
            this.$el.append($table);

            var header = new Header({
                columns: this.columns,
                sorter: this.sorter,
                // add by matthew
                filter: this.filter
            });
            $table.append(header.render().el);

            $table.append('<tbody></tbody>');

            if (this.collection.isEmpty()) {
                this.$el.append(this.options.emptyMessage);
            } else {
                this.collection.forEach(this.renderRow, this);
            }
        },

        renderPagination: function() {
            var pagination = new Pagination({
                pager: this.pager
            });
            var a = pagination.render();
            this.$el.append(a.el);
        },

        renderRow: function(model) {
            var options = {
                model: model,
                columns: this.columns
            };
            var rowClassName = this.options.rowClassName;
            if (_.isFunction(rowClassName)) {
                rowClassName = rowClassName(model);
            }
            options.className = rowClassName;

            var row = new Row(options);
            this.$('tbody').append(row.render(this.columns).el);
        },

        refresh: function(options) {
            // console.log(options);
            if (this.options.paginated) {
                this._page(options);
            } else {
                if (this.options.inMemory) {
                    this.collection.trigger('reset', this.collection);
                    if (options && options.success) {
                        options.success();
                    }
                } else {
                    this._request(options);
                }
            }
        },

        sort: function(column, order) {
            this.sorter.sort(column, order);
        },

        page: function(page) {
            this.pager.page(page);
        },

        perPage: function(perPage) {
            this.pager.set('perPage', perPage);
        },

        _sort: function() {
            if (this.options.inMemory) {
                this._sortInMemory();
            } else {
                this._sortRequest();
            }
        },

        _sortInMemory: function() {
            if (this.options.paginated) {
                this._originalCollection.comparator = _.bind(this._comparator, this);
                this._originalCollection.sort();
                this.page(1);
            } else {
                this.collection.comparator = _.bind(this._comparator, this);
                this.collection.sort();
            }
        },

        _comparator: function(model1, model2) {
            var columnComparator = this._comparatorForColumn(this.sorter.get('column'));
            var order = columnComparator(model1, model2);
            return this.sorter.sortedASC() ? order : -order;
        },

        _comparatorForColumn: function(column) {
            var c = _.find(this.columns, function(c) {
                return c.property === column || c.index === column;
            });
            return c ? c.comparator : undefined;
        },

        _sortRequest: function() {
            this._request();
        },

        _page: function(options) {
            if (this.options.inMemory) {
                this._pageInMemory(options);
            } else {
                this._pageRequest(options);
            }
        },

        _pageRequest: function(options) {
            this._request(options);
        },

        _request: function(opts) {
            var options = opts || this.options || {};

            options = _.clone(options);

            var success = options.success;
            var silent = options.silent;

            options.data = prototype(options.data);

            options.data = _.defaults(this._getRequestData(), options.data);

            //add by matthew
            var filterData = this.filter.toJSON();

            // console.log(filterData);

            var where = {};
            var like = {};
            var where_modify = false;
            var like_modify = false;
            for (var key in filterData) {
                if (filterData.hasOwnProperty(key)) {
                    if (filterData[key].f === "where") {
                        where[key] = filterData[key].v;
                        where_modify = true;
                    } else if (filterData[key].f === "like") {
                        like[key] = filterData[key].v;
                        like_modify = true;
                    }
                }
            }

            //add by matthew
            if (where_modify === true)
                options.data.where = where;

            if (like_modify === true)
                options.data.like = like;


            //add by matthew
            if (typeof this.sorter.get("column") !== 'undefined')
                options.data.order = this.sorter.get("column") + " " + this.sorter.get("order");
            else
                options.data.order = this.options.data.order;


            var that = this;
            
            // options.silent = true;

            // options.async = false;
            
            this.collection.fetch(options);
        },

        _getRequestData: function() {
            if (this.collection.data && _.isFunction(this.collection.data)) {
                return this.collection.data(this.pager, this.sorter, this.filter); //usually not run
            } else if (this.collection.data && typeof this.collection.data === 'object') {
                var data = {};
                _.each(this.collection.data, function(value, param) {
                    if (_.isFunction(value)) {
                        value = value(this.pager, this.sorter, this.filter); //usually not run
                    }
                    data[param] = value;
                }, this);
                return data;
            } else if (this.options.paginated) {
                return {
                    page: this.pager.get('currentPage'),
                    perPage: this.pager.get('perPage')
                };
            }

            return {};
        },

        _pageInMemory: function(options) {
            if (!this._originalCollection) {
                this._originalCollection = this.collection.clone();
            }

            var page = this.pager.get('currentPage');
            var perPage = this.pager.get('perPage');

            var begin = (page - 1) * perPage;
            var end = begin + perPage;

            if (options && options.success) {
                options.success();
            }
            this.pager.set('total', this._originalCollection.size());

            this.collection.reset(this._originalCollection.slice(begin, end), options);
        },

        _prepare: function() {
            this._prepareSorter();
            // add by matthew
            this._prepareFilter();
            this._preparePager();
            this._prepareColumns();
            this.refresh();
        },

        // add by matthew
        _prepareFilter: function() {
            this.filter = new Backbone.Model();
            this.filter.on('change', function() {
                this.pager.set('currentPage', 1);
                this._filtered();
            }, this);

        },

        _filtered: function() {
            this._request();
        },

        _prepareSorter: function() {
            this.sorter = new Sorter();
            this.sorter.on('change', function() {
                this._sort(this.sorter.get('column'), this.sorter.get('order'));
            }, this);
        },

        _preparePager: function() {
            this.pager = new Pager({
                currentPage: this.options.page,
                perPage: this.options.perPage,
                selectorNum: this.options.selectorNum
            });

            this.pager.on('change:currentPage', function() {
                this._page();
            }, this);
            this.pager.on('change:perPage', function() {
                this.page(1);
            }, this);
        },

        _prepareColumns: function() {
            if (!this.columns || _.isEmpty(this.columns)) {
                this._defaultColumns();
            } else {
                _.each(this.columns, function(column, i) {
                    this.columns[i] = this._prepareColumn(column, i);
                }, this);
            }
        },

        _prepareColumn: function(column, index) {
            if (_.isString(column)) {
                column = {
                    property: column
                };
            }
            if (_.isObject(column)) {
                column.index = index;
                if (column.property) {
                    column.title = column.title || this._formatTitle(column.property);
                } else if (!column.property && !column.view) {
                    throw new Error('Column \'' + column.title + '\' has no property and must accordingly define a custom cell view.');
                }
                if (this.options.inMemory && column.sortable) {
                    if (!column.comparator && !column.property && !column.sortedProperty) {
                        throw new Error('Invalid column definition: a sortable column must have a comparator, property or sortedProperty defined.');
                    }
                    column.comparator = column.comparator || this._defaultComparator(column.sortedProperty || column.property);
                }
            }
            return column;
        },

        _formatTitle: function(title) {
            return _.map(title.split(/\s|_/), function(word) {
                return word.charAt(0).toUpperCase() + word.substr(1);
            }).join(' ');
        },

        _defaultColumns: function() {
            this.columns = [];
            var model = this.collection.first(),
                i = 0;
            if (model) {
                for (var p in model.toJSON()) {
                    this.columns.push(this._prepareColumn(p, i++));
                }
            }
        },

        _defaultComparator: function(column) {
            return function(model1, model2) {
                var val1 = model1.has(column) ? model1.get(column) : '';
                var val2 = model2.has(column) ? model2.get(column) : '';
                return val1.localeCompare(val2);
            };
        }
    }); //end of Datagrid

    var Header = Datagrid.Header = Backbone.View.extend({
        tagName: 'thead',

        initialize: function(options) {
            this.options = options;
            this.columns = this.options.columns;
            this.sorter = this.options.sorter;
            // add by matthew
            this.filter = this.options.filter;
        },

        render: function() {
            var model = new Backbone.Model();
            var headerColumn, columns = [];
            _.each(this.columns, function(column, i) {
                headerColumn = _.clone(column);
                headerColumn.property = column.property || column.index;
                headerColumn.view = column.headerView || {
                    type: HeaderCell,
                    sorter: this.sorter
                };

                model.set(headerColumn.property, column.title);
                columns.push(headerColumn);
            }, this);

            var row = new Row({
                model: model,
                columns: columns,
                header: true
            });
            this.$el.html(row.render().el);

            // add by matthew
            var clen = this.columns.length;
            var useFilter = false;
            for (var i = 0; i < clen; i++) {
                if (_.isObject(this.columns[i].filter)) {
                    useFilter = true;
                    break;
                }
            };

            if (useFilter == true) {
                var model = new Backbone.Model();
                var headerColumn, columns = [];

                _.each(this.columns, function(column, i) {
                    headerColumn = _.clone(column);
                    headerColumn.property = column.property || column.index;
                    headerColumn.view = {
                        type: FilterCell, //Âä†‰∏ÄË°åÔºåÁî®ÊàëÂÄëÁöÑFilterCellÊää
                        filter: this.filter
                    };

                    model.set(headerColumn.property, column.title);
                    columns.push(headerColumn);
                }, this);

                var row = new Backbone.Datagrid.Row({
                    model: model,
                    columns: columns,
                    header: true
                });
                this.$el.append(row.render().el);
            }

            return this;
        }
    }); //end of Header

    var Row = Datagrid.Row = Backbone.View.extend({
        tagName: 'tr',

        initialize: function(options) {
            this.options = options;
            this.columns = this.options.columns;
            this.model.on('change', this.render, this);
        },

        render: function() {
            this.$el.empty();
            _.each(this.columns, this.renderCell, this);
            return this;
        },

        renderCell: function(column) {
            var cellView = this._resolveCellView(column);
            this.$el.append(cellView.render().el);
        },

        _resolveCellView: function(column) {
            var options = {
                model: this.model,
                column: column
            };
            if (this.options.header || column.header) {
                options.tagName = 'th';
            }
            var cellClassName = column.cellClassName;
            if (_.isFunction(cellClassName)) {
                cellClassName = cellClassName(this.model);
            }
            options.className = cellClassName;


            var view = column.view || Cell;

            // Resolve view from string or function
            if (typeof view !== 'object' && !(view.prototype && view.prototype.render)) {
                if (_.isString(view)) {
                    options.callback = _.template(view);
                    view = CallbackCell;
                } else if (_.isFunction(view) && !view.prototype.render) {
                    options.callback = view;
                    view = CallbackCell;
                } else {
                    throw new TypeError('Invalid view passed to column "' + column.title + '".');
                }
            }

            // Resolve view from options
            else if (typeof view === 'object') {
                _.extend(options, view);
                view = view.type;
                if (!view || !view.prototype || !view.prototype.render) {
                    throw new TypeError('Invalid view passed to column "' + column.title + '".');
                }
            }

            return new view(options);
        }
    }); //end of Row
    var Pagination = Datagrid.Pagination = Backbone.View.extend({
        className: 'row',

        events: {
            'click a': 'page',
            'click li.disabled a': function(e) {
                e.preventDefault();
            }
        },

        initialize: function(options) {
            this.options = options;
            this.pager = this.options.pager;
        },

        render: function() {
            var pager = function(count, page, per_page, selector_num) {
                //the num of page in the system
                var num_page = Math.ceil(count / per_page);

                //return value
                var ret = {};

                if (_.isString(page))
                    page = parseInt(page, 10);

                if (_.isString(per_page))
                    per_page = parseInt(per_page, 10);
                //if page is 1
                ret['is_first_page'] = page === 1 || num_page === 0;

                // only few page,not more than selector_num
                if (selector_num > num_page) {
                    //display all of them
                    var page_no_num = num_page;
                    var page_no_arr = [];

                    // generate page_no_arr
                    for (var i = 1; i <= num_page; i++) {
                        page_no_arr.push({
                            num: i,
                            is_active: i === page
                        });
                    }
                }
                // enough page
                else {
                    var pae_no_num = selector_num;
                    page_no_arr = [];

                    //calculate start no. and end no.
                    var page_no_start = page - Math.floor(selector_num / 2);
                    var page_no_end = page_no_start + selector_num - 1;

                    // handle special case 1
                    if (page_no_start < 1) {
                        page_no_start = 1;
                        page_no_end = page_no_start + selector_num - 1;
                    }
                    // handle special case 2
                    else if (page_no_end > num_page) {
                        page_no_end = num_page;
                        page_no_start = page_no_end - selector_num + 1;
                    }

                    // generate page_no_arr
                    for (var i = page_no_start; i <= page_no_end; i++) {
                        page_no_arr.push({
                            num: i,
                            is_active: i === page
                        });
                    }
                }
                ret['count'] = count || 0;
                ret['page_no'] = page_no_arr;
                ret['is_last_page'] = page === num_page || num_page === 0;
                ret['prev_page'] = page - 1;
                ret['next_page'] = page + 1;
                ret['page'] = page;
                ret['last_page'] = num_page;
                ret['perPage'] = perPage;
                return ret;
            };
            var selectorNum = this.pager.get("selectorNum");
            var currentPage = this.pager.get('currentPage');
            var perPage = this.pager.get('perPage');
            var total = this.pager.get('total');

            var ret = pager(total, currentPage, perPage, selectorNum);

            var template = getTplBin($.config.GridView.pager);
            var html = template(ret);
            this.$el.html(html);
            return this;
        },

        page: function(event) {
            var $target = $(event.target),
                page;
            if ($target.parent().hasClass('prev')) {
                this.pager.prev();
            } else if ($target.parent().hasClass('next')) {
                this.pager.next();
            } else if ($target.parent().hasClass('firstPage')) {
                this.pager.firstpage();
            } else if ($target.parent().hasClass('lastPage')) {
                this.pager.lastpage();
            } else {
                this.pager.page(parseInt($(event.target).html(), 10));
            }
            return false;
        }
    }); //end of Pagination

    var Cell = Datagrid.Cell = Backbone.View.extend({
        tagName: 'td',

        initialize: function(options) {
            this.options = options;
            this.column = this.options.column;
        },

        render: function() {
            this._prepareValue();
            this.$el.html(this.value);
            return this;
        },

        _prepareValue: function() {
            this.value = this.model.get(this.column.property);
        }
    }); // end of Cell

    var CallbackCell = Datagrid.CallbackCell = Cell.extend({
        initialize: function(options) {
            this.options = options;
            CallbackCell.__super__.initialize.call(this, options);
            this.callback = this.options.callback;
        },

        _prepareValue: function() {
            this.value = this.callback(this.model.toJSON());
        }
    }); // end of CallbackCell

    var ActionCell = Datagrid.ActionCell = Cell.extend({
        initialize: function(options) {
            this.options = options;
            ActionCell.__super__.initialize.call(this, options);
        },

        action: function() {
            return this.options.action(this.model);
        },

        _prepareValue: function() {
            var a = $('<a></a>');

            a.html(this.options.label);
            a.attr('href', this.options.href || '#');
            if (this.options.actionClassName) {
                a.addClass(this.options.actionClassName);
            }
            if (this.options.action) {
                this.delegateEvents({
                    'click a': this.action
                });
            }

            this.value = a;
        }
    }); // end of ActionCell

    var HeaderCell = Datagrid.HeaderCell = Cell.extend({
        initialize: function(options) {
            this.options = options;
            HeaderCell.__super__.initialize.call(this, this.options);

            this.sorter = this.options.sorter;

            if (this.column.sortable) {
                this.delegateEvents({
                    click: 'sort'
                });
            }
        },

        render: function() {
            this._prepareValue();
            var html = this.value,
                icon;

            if (this.column.sortable) {
                this.$el.addClass('sortable');
                if (this.sorter.sortedBy(this.column.sortedProperty || this.column.property) || this.sorter.sortedBy(this.column.index)) {
                    if (this.sorter.sortedASC()) {
                        icon = 'icon-chevron-up';
                    } else {
                        icon = 'icon-chevron-down';
                    }
                } else {
                    icon = 'icon-minus';
                }

                html += ' <i class="' + icon + ' pull-right"></i>';
            }

            this.$el.html(html);
            return this;
        },

        sort: function() {
            this.sorter.sort(this.column.sortedProperty || this.column.property);
        }
    }); // end of HeaderCell

    // add by matthew
    var FilterCell = Datagrid.FilterCell = Cell.extend({
        initialize: function(options) {
            this.options = options
            FilterCell.__super__.initialize.call(this, options);

            this.filter = this.options.filter;

            if (_.isObject(this.column.filter)) {
                if (this.column.filter.type === "droplist") {
                    _.bindAll(this, "change");
                }
            }
        },

        events: {
            "change select": "change"
        },

        change: function(e) {
            if (this.column.filter.type === "droplist") {
                var val = this.$el.find("select").val();
                if (val !== $.config.datagrid.droplist.noselect) {
                    var data = {
                        v: val,
                        f: "where"
                    };
                    this.filter.set(this.column.property, data);
                } else {
                    this.filter.unset(this.column.property);
                }
            }

        },
        render: function() {
            this._prepareValue();
            var html = "&nbsp;";

            if (_.isObject(this.column.filter)) {
                var fc = this.column.filter;
                if (fc["type"] === "droplist") {
                    var tplbin = getTplBin($.config.datagrid.droplist);
                    html = tplbin(fc);
                    var v = this.filter.get(this.column.property);
                    var v = v && v.v || $.config.datagrid.droplist.noselect;
                    var $html = $(html).val(v);
                    html = $html;
                }
            }
            this.$el.html(html);
            return this;
        }
    }); // end of FilterCell

    var Pager = Datagrid.Pager = Backbone.Model.extend({
        initialize: function(options) {
            this.options = options;
            this.on('change:perPage change:total', function() {
                this.totalPages(this.get('total'));
            }, this);
            if (this.has('total')) {
                this.totalPages(this.get('total'));
            }
        },

        update: function(options) {
            _.each(['hasNext', 'hasPrev', 'total', 'totalPages', 'lastPage'], function(p) {
                if (!_.isUndefined(options[p])) {
                    this.set(p, options[p]);
                }
            }, this);
        },

        totalPages: function(total) {
            if (_.isNumber(total)) {
                this.set('totalPages', Math.ceil(total / this.get('perPage')));
            } else {
                this.set('totalPages', undefined);
            }
        },

        page: function(page) {
            if (this.inBounds(page)) {
                if (page === this.get('currentPage')) {
                    this.trigger('change:currentPage');
                } else {
                    this.set('currentPage', page);
                }
            }
        },

        next: function() {
            this.page(this.get('currentPage') + 1);
        },

        prev: function() {
            this.page(this.get('currentPage') - 1);
        },

        firstpage: function() {
            this.page(1);
        },

        lastpage: function() {
            this.page(this.get('totalPages'));
        },

        hasTotal: function() {
            return this.has('totalPages');
        },

        hasNext: function() {
            if (this.hasTotal()) {
                return this.get('currentPage') < this.get('totalPages');
            } else {
                return this.get('hasNext');
            }
        },

        hasPrev: function() {
            if (this.has('hasPrev')) {
                return this.get('hasPrev');
            } else {
                return this.get('currentPage') > 1;
            }
        },

        inBounds: function(page) {
            return !this.hasTotal() || page > 0 && page <= this.get('totalPages');
        },

        set: function() {
            var args = [];
            for (var i = 0; i < arguments.length; i++) {
                args.push(arguments[i]);
            }
            args[2] = _.extend({}, args[2], {
                validate: true
            });
            return Backbone.Model.prototype.set.apply(this, args);
        },

        validate: function(attrs) {
            if (attrs.perPage < 1) {
                throw new Error('perPage must be greater than zero.');
            }
        }
    }); // end of Pager

    var Sorter = Datagrid.Sorter = Backbone.Model.extend({
        sort: function(column, order) {
            if (!order && this.get('column') === column) {
                this.toggleOrder();
            } else {
                this.set({
                    column: column,
                    order: order || Sorter.ASC
                });
            }
        },

        sortedBy: function(column) {
            return this.get('column') === column;
        },

        sortedASC: function() {
            return this.get('order') === Sorter.ASC;
        },

        sortedDESC: function() {
            return this.get('order') === Sorter.DESC;
        },

        toggleOrder: function() {
            if (this.get('order') === Sorter.ASC) {
                this.set('order', Sorter.DESC);
            } else {
                this.set('order', Sorter.ASC);
            }
        }
    }); // end of Sorter

    Sorter.ASC = 'asc';
    Sorter.DESC = 'desc';

    Backbone.Datagrid = Datagrid;

})();
